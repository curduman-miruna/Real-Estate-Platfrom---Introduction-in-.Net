@page "/properties"
@using RealEstatePlatform.App.Contracts
@using RealEstatePlatform.App.ViewModels

<br />

<style>
    .property-img {
        width: auto;
        height: 200px;
        overflow: hidden;
        border-radius: 5px;
    }

    .filter{
        margin: 0 20px;
    }
   
</style>

<div class="container">
    <div class="container">
        <div class="btn-group d-flex" role="group">
            <label class="btn">
                Show:
            </label>
            <button type="button" class="btn btn-secondary filter" @onclick="() => ShowAll()">
                All
            </button>
            @if (PropertyTypes != null)
            {
                @foreach (var propertyType in PropertyTypes)
                {
                    <button type="button" class="btn btn-secondary filter flex-fill" @onclick="() => FilterPropertiesByType(propertyType.PropertyTypeId)">
                        @propertyType.PropertyTypeName
                    </button>
                }
            }
            @if(ListingTypes != null)
            {
                @foreach (var listingType in ListingTypes)
                {
                    <button type="button" class="btn btn-secondary filter flex-fill" @onclick="() => FilterPropertiesByListing(listingType.ListingTypeId)">
                        @listingType.ListingTypeName
                    </button>
                }
            }

          
        </div>
        <div class="d-flex justify-content-center" style="margin-bottom:20px">
            <div class="mt-3">
                <label for="minPrice">Min Price:</label>
                <input type="number" id="minPrice" @bind="MinPrice" />

                <label for="maxPrice" style="margin-left:20px">Max Price:</label>
                <input type="number" id="maxPrice" @bind="MaxPrice" />

                <button class="btn btn-primary" @onclick="ApplyPriceRangeFilter">Apply</button>
            </div>
        </div>
        @code {

            private decimal? MinPrice { get; set; }
            private decimal? MaxPrice { get; set; }

            private void ApplyPriceRangeFilter()
            {
                // Filter properties based on the price range
                FilteredProperties = Properties
                .Where(p =>
                (!MinPrice.HasValue || p.Price >= MinPrice.Value) &&
                (!MaxPrice.HasValue || p.Price <= MaxPrice.Value)
                )
                .ToList();
            }
        }
    </div>
</div>
    <br />

@if(Properties == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="cardsView" class="container">
        <div class="row">
            @foreach (var property in FilteredProperties)
            {
                <div class="col-lg-4 mb-5">
                    <div class="card h-100 shadow-3 hover-shadow-6 propCard">

                        <div class="card-body">
                            <div class="h-100 d-flex flex-column">
                                <div class="content-holder">
                                    <h4>@property.PropertyName</h4>
                                    <div class="w-100 mt-auto">
                                        <label class="price">Price: @property.Price $</label>

                                    </div>
                                    <div class="property-img mb-3">
                                        @{
                                            ImageProperty = GetImageForCertainPropertyId(property.PropertyId);
                                        }
                                        @if (ImageProperty != null)
                                        {
                                            <img src="@ImageProperty.ImageData" style="width:100%; height:auto;">
                                        }
                                        else
                                        {
                                            <img src="https://source.unsplash.com/featured/?building&@Guid.NewGuid().ToString()" style="width:100%; height:auto;">
                                        }

                                        <!-- Appending a unique identifier to the URL for a different image each time -->
                                    </div>
                                    <p>@property.Description</p>
                                </div>
                                <div class="d-flex justify-content-center" style="margin-bottom:20px">
                                    <button class="btn btn-lg btn-primary" @onclick="() => NavigateToPropertyDetails(property)">See details</button>
                                
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

}

@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public IPropertyTypeDataService PropertyTypeDataService { get; set; }

    [Inject]
    public IListingTypeDataService ListingTypeDataService { get; set; }

    [Inject]
    public IImageDataService ImageDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<PropertyViewModel> Properties { get; set; }

    public List<ImageViewModel> Images { get; set; }

    public List<PropertyTypeViewModel> PropertyTypes { get; set; }

    public List<ListingTypeViewModel> ListingTypes { get; set; }

    public ImageViewModel ImageProperty { get; set; }
    // Introduce a new list for filtered properties
    private List<PropertyViewModel> FilteredProperties { get; set; }

    private void FilterPropertiesByType(Guid propertyTypeId)
    {
        FilteredProperties = Properties
            .Where(p => p.PropertyTypeId == propertyTypeId)
            .ToList();
    }

    private void FilterPropertiesByListing(Guid listingTypeId)
    {
        FilteredProperties = Properties
            .Where(p => p.ListingTypeId == listingTypeId)
            .ToList();
    }

    // Method to show all properties
    private void ShowAll()
    {
        FilteredProperties = Properties;
    }
}

@functions {

    private void NavigateToUpdateProperty(PropertyViewModel property)
    {
        NavigationManager.NavigateTo($"/updateproperty/{property.PropertyId}");
    }

    private string GetPropertyTypeName(Guid propertyTypeId)
    {
        var propertyType = PropertyTypes.FirstOrDefault(pt => pt.PropertyTypeId == propertyTypeId);
        return propertyType?.PropertyTypeName ?? "";
    }

    private string GetListingTypeName(string listingTypeId)
    {
        Guid.TryParse(listingTypeId, out Guid listingTypeIdGuid);
        var listingType = ListingTypes.FirstOrDefault(pt => pt.ListingTypeId == listingTypeIdGuid);
        return listingType?.ListingTypeName ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        ListingTypes = (await ListingTypeDataService.GetListingTypesAsync()).ToList();
        PropertyTypes = (await PropertyTypeDataService.GetPropertyTypesAsync()).ToList();
        Properties = (await PropertyDataService.GetPropertiesAsync()).ToList();
        Images = (await ImageDataService.GetImagesAsync()).ToList();
        FilteredProperties = Properties;
     
    }

    public ImageViewModel GetImageForCertainPropertyId(Guid propertyId)
    {
        return Images.FirstOrDefault(image => image.PropertyId == propertyId);
    }

    private void NavigateToPropertyDetails(PropertyViewModel property)
    {
        NavigationManager.NavigateTo($"/propertydetails/{property.PropertyId}");
    }
}



